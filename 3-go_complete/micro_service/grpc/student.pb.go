// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: student.proto

package student_service

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Student struct {
	Name      string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt int64              `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Locations []string           `protobuf:"bytes,4,rep,name=Locations,proto3" json:"Locations,omitempty"`
	Scores    map[string]float32 `protobuf:"bytes,3,rep,name=Scores,proto3" json:"Scores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Gender    bool               `protobuf:"varint,5,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Age       int32              `protobuf:"varint,6,opt,name=Age,proto3" json:"Age,omitempty"` // Deprecated: Do not use.
	Height    float32            `protobuf:"fixed32,7,opt,name=Height,proto3" json:"Height,omitempty"`
	Id        int32              `protobuf:"varint,8,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *Student) Reset()         { *m = Student{} }
func (m *Student) String() string { return proto.CompactTextString(m) }
func (*Student) ProtoMessage()    {}
func (*Student) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{0}
}
func (m *Student) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Student) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Student.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Student) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Student.Merge(m, src)
}
func (m *Student) XXX_Size() int {
	return m.Size()
}
func (m *Student) XXX_DiscardUnknown() {
	xxx_messageInfo_Student.DiscardUnknown(m)
}

var xxx_messageInfo_Student proto.InternalMessageInfo

func (m *Student) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Student) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Student) GetLocations() []string {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *Student) GetScores() map[string]float32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *Student) GetGender() bool {
	if m != nil {
		return m.Gender
	}
	return false
}

// Deprecated: Do not use.
func (m *Student) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Student) GetHeight() float32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Student) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Students struct {
	Data []*Student `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Students) Reset()         { *m = Students{} }
func (m *Students) String() string { return proto.CompactTextString(m) }
func (*Students) ProtoMessage()    {}
func (*Students) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{1}
}
func (m *Students) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Students) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Students.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Students) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Students.Merge(m, src)
}
func (m *Students) XXX_Size() int {
	return m.Size()
}
func (m *Students) XXX_DiscardUnknown() {
	xxx_messageInfo_Students.DiscardUnknown(m)
}

var xxx_messageInfo_Students proto.InternalMessageInfo

func (m *Students) GetData() []*Student {
	if m != nil {
		return m.Data
	}
	return nil
}

type StudentID struct {
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *StudentID) Reset()         { *m = StudentID{} }
func (m *StudentID) String() string { return proto.CompactTextString(m) }
func (*StudentID) ProtoMessage()    {}
func (*StudentID) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{2}
}
func (m *StudentID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentID.Merge(m, src)
}
func (m *StudentID) XXX_Size() int {
	return m.Size()
}
func (m *StudentID) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentID.DiscardUnknown(m)
}

var xxx_messageInfo_StudentID proto.InternalMessageInfo

func (m *StudentID) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type StudentIDs struct {
	Ids []int32 `protobuf:"varint,1,rep,packed,name=Ids,proto3" json:"Ids,omitempty"`
}

func (m *StudentIDs) Reset()         { *m = StudentIDs{} }
func (m *StudentIDs) String() string { return proto.CompactTextString(m) }
func (*StudentIDs) ProtoMessage()    {}
func (*StudentIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{3}
}
func (m *StudentIDs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentIDs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentIDs.Merge(m, src)
}
func (m *StudentIDs) XXX_Size() int {
	return m.Size()
}
func (m *StudentIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentIDs.DiscardUnknown(m)
}

var xxx_messageInfo_StudentIDs proto.InternalMessageInfo

func (m *StudentIDs) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterType((*Student)(nil), "Student")
	proto.RegisterMapType((map[string]float32)(nil), "Student.ScoresEntry")
	proto.RegisterType((*Students)(nil), "Students")
	proto.RegisterType((*StudentID)(nil), "StudentID")
	proto.RegisterType((*StudentIDs)(nil), "StudentIDs")
}

func init() { proto.RegisterFile("student.proto", fileDescriptor_94a1c1b032ad0c00) }

var fileDescriptor_94a1c1b032ad0c00 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbf, 0x6e, 0xd4, 0x40,
	0x10, 0xc6, 0x6f, 0xd6, 0x67, 0xc7, 0x1e, 0x43, 0x84, 0x46, 0x27, 0xb4, 0x3a, 0x82, 0x65, 0x59,
	0x42, 0x6c, 0x11, 0x99, 0xe8, 0x42, 0xc1, 0x9f, 0x2a, 0x51, 0x50, 0xb0, 0x44, 0xb5, 0xd7, 0xd1,
	0x44, 0xc6, 0x5e, 0x85, 0x13, 0x60, 0x23, 0xef, 0x26, 0x52, 0xde, 0x82, 0x96, 0x37, 0xa2, 0x4c,
	0x07, 0x25, 0xba, 0x7b, 0x11, 0x64, 0x7b, 0xcf, 0xce, 0xa1, 0x74, 0x33, 0x9f, 0x7f, 0x9e, 0xf9,
	0x3e, 0xed, 0xe0, 0x43, 0x6d, 0xae, 0x4a, 0x55, 0x99, 0xf4, 0x7b, 0x53, 0x9b, 0x3a, 0xf9, 0xc9,
	0x70, 0x6f, 0xd9, 0x2b, 0x44, 0x38, 0xad, 0xf2, 0x6f, 0x8a, 0x43, 0x0c, 0x22, 0x90, 0x5d, 0x4d,
	0x4f, 0x11, 0x8b, 0x46, 0xe5, 0x46, 0x95, 0x17, 0xb9, 0xe1, 0x2c, 0x06, 0xe1, 0xc8, 0xc0, 0x2a,
	0x27, 0x86, 0x0e, 0x30, 0xf8, 0x50, 0x17, 0xb9, 0x59, 0xd5, 0x95, 0xe6, 0xd3, 0xd8, 0x11, 0x81,
	0x1c, 0x05, 0x3a, 0x44, 0x6f, 0x59, 0xd4, 0x8d, 0xd2, 0xdc, 0x89, 0x1d, 0x11, 0x2e, 0x66, 0xa9,
	0x5d, 0x95, 0xf6, 0xf2, 0xbb, 0xca, 0x34, 0x37, 0xd2, 0x32, 0xf4, 0x18, 0xbd, 0x73, 0x55, 0x95,
	0xaa, 0xe1, 0x6e, 0x0c, 0xc2, 0x97, 0xb6, 0xa3, 0x19, 0x3a, 0x27, 0x97, 0x8a, 0x7b, 0x31, 0x08,
	0xf7, 0x94, 0x71, 0x90, 0x6d, 0xdb, 0xd2, 0xef, 0xd5, 0xea, 0xf2, 0xb3, 0xe1, 0x7b, 0x31, 0x08,
	0x26, 0x6d, 0x47, 0xfb, 0xc8, 0xb2, 0x92, 0xfb, 0x2d, 0x2c, 0x59, 0x56, 0xce, 0x5f, 0x63, 0x78,
	0x67, 0x19, 0x3d, 0x42, 0xe7, 0x8b, 0xba, 0xb1, 0x11, 0xdb, 0x92, 0x66, 0xe8, 0x5e, 0xe7, 0x5f,
	0xaf, 0x54, 0x17, 0x8e, 0xc9, 0xbe, 0x79, 0xc3, 0x5e, 0x41, 0x22, 0xd0, 0xb7, 0x7e, 0x35, 0x1d,
	0xe0, 0xf4, 0x2c, 0x37, 0x39, 0x87, 0x2e, 0x88, 0xbf, 0x0d, 0x22, 0x3b, 0x35, 0x79, 0x82, 0x81,
	0x15, 0xb2, 0x33, 0xeb, 0x00, 0xb6, 0x0e, 0x92, 0x08, 0x71, 0xf8, 0xa8, 0x5b, 0x03, 0x59, 0xa9,
	0xbb, 0x39, 0xae, 0x6c, 0xcb, 0xc5, 0x6f, 0xc0, 0x7d, 0x0b, 0x2c, 0x55, 0x73, 0xbd, 0x2a, 0x14,
	0x25, 0x88, 0xe7, 0xca, 0x6c, 0xdf, 0x05, 0xd3, 0xe1, 0xff, 0xf9, 0xb0, 0x99, 0x9e, 0x61, 0x38,
	0x32, 0x9a, 0xc2, 0x11, 0xd2, 0xf3, 0x20, 0x1d, 0xf4, 0xe7, 0xf8, 0xe0, 0x0e, 0xb6, 0xd8, 0xe5,
	0x86, 0x69, 0x47, 0xf0, 0x1f, 0x78, 0xbc, 0xb3, 0x75, 0x9c, 0x27, 0x80, 0xc4, 0x0e, 0xf8, 0xf2,
	0x7e, 0x7b, 0x02, 0x8e, 0xe0, 0xf4, 0xf0, 0xd7, 0x3a, 0x82, 0xdb, 0x75, 0x04, 0x7f, 0xd7, 0x11,
	0xfc, 0xd8, 0x44, 0x93, 0xdb, 0x4d, 0x34, 0xf9, 0xb3, 0x89, 0x26, 0x1f, 0x29, 0x7d, 0xf1, 0xd6,
	0x1e, 0xe2, 0x85, 0xee, 0x43, 0x7f, 0xf2, 0xba, 0x8b, 0x3c, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff,
	0xc2, 0x19, 0x7f, 0x3d, 0xa2, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StudentServiceClient is the client API for StudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StudentServiceClient interface {
	// Unary RPC
	GetStudent(ctx context.Context, in *StudentID, opts ...grpc.CallOption) (*Student, error)
	GetStudents(ctx context.Context, in *StudentIDs, opts ...grpc.CallOption) (*Students, error)
	// Server streaming RPC
	GetStudents2(ctx context.Context, in *StudentIDs, opts ...grpc.CallOption) (StudentService_GetStudents2Client, error)
	// Client streaming RPC
	GetStudents3(ctx context.Context, opts ...grpc.CallOption) (StudentService_GetStudents3Client, error)
	// Bidirectional streaming RPC
	GetStudents4(ctx context.Context, opts ...grpc.CallOption) (StudentService_GetStudents4Client, error)
}

type studentServiceClient struct {
	cc *grpc.ClientConn
}

func NewStudentServiceClient(cc *grpc.ClientConn) StudentServiceClient {
	return &studentServiceClient{cc}
}

func (c *studentServiceClient) GetStudent(ctx context.Context, in *StudentID, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/StudentService/GetStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) GetStudents(ctx context.Context, in *StudentIDs, opts ...grpc.CallOption) (*Students, error) {
	out := new(Students)
	err := c.cc.Invoke(ctx, "/StudentService/GetStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) GetStudents2(ctx context.Context, in *StudentIDs, opts ...grpc.CallOption) (StudentService_GetStudents2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_StudentService_serviceDesc.Streams[0], "/StudentService/GetStudents2", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceGetStudents2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StudentService_GetStudents2Client interface {
	Recv() (*Student, error)
	grpc.ClientStream
}

type studentServiceGetStudents2Client struct {
	grpc.ClientStream
}

func (x *studentServiceGetStudents2Client) Recv() (*Student, error) {
	m := new(Student)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentServiceClient) GetStudents3(ctx context.Context, opts ...grpc.CallOption) (StudentService_GetStudents3Client, error) {
	stream, err := c.cc.NewStream(ctx, &_StudentService_serviceDesc.Streams[1], "/StudentService/GetStudents3", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceGetStudents3Client{stream}
	return x, nil
}

type StudentService_GetStudents3Client interface {
	Send(*StudentID) error
	CloseAndRecv() (*Students, error)
	grpc.ClientStream
}

type studentServiceGetStudents3Client struct {
	grpc.ClientStream
}

func (x *studentServiceGetStudents3Client) Send(m *StudentID) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studentServiceGetStudents3Client) CloseAndRecv() (*Students, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Students)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *studentServiceClient) GetStudents4(ctx context.Context, opts ...grpc.CallOption) (StudentService_GetStudents4Client, error) {
	stream, err := c.cc.NewStream(ctx, &_StudentService_serviceDesc.Streams[2], "/StudentService/GetStudents4", opts...)
	if err != nil {
		return nil, err
	}
	x := &studentServiceGetStudents4Client{stream}
	return x, nil
}

type StudentService_GetStudents4Client interface {
	Send(*StudentID) error
	Recv() (*Student, error)
	grpc.ClientStream
}

type studentServiceGetStudents4Client struct {
	grpc.ClientStream
}

func (x *studentServiceGetStudents4Client) Send(m *StudentID) error {
	return x.ClientStream.SendMsg(m)
}

func (x *studentServiceGetStudents4Client) Recv() (*Student, error) {
	m := new(Student)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StudentServiceServer is the server API for StudentService service.
type StudentServiceServer interface {
	// Unary RPC
	GetStudent(context.Context, *StudentID) (*Student, error)
	GetStudents(context.Context, *StudentIDs) (*Students, error)
	// Server streaming RPC
	GetStudents2(*StudentIDs, StudentService_GetStudents2Server) error
	// Client streaming RPC
	GetStudents3(StudentService_GetStudents3Server) error
	// Bidirectional streaming RPC
	GetStudents4(StudentService_GetStudents4Server) error
}

// UnimplementedStudentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStudentServiceServer struct {
}

func (*UnimplementedStudentServiceServer) GetStudent(ctx context.Context, req *StudentID) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (*UnimplementedStudentServiceServer) GetStudents(ctx context.Context, req *StudentIDs) (*Students, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudents not implemented")
}
func (*UnimplementedStudentServiceServer) GetStudents2(req *StudentIDs, srv StudentService_GetStudents2Server) error {
	return status.Errorf(codes.Unimplemented, "method GetStudents2 not implemented")
}
func (*UnimplementedStudentServiceServer) GetStudents3(srv StudentService_GetStudents3Server) error {
	return status.Errorf(codes.Unimplemented, "method GetStudents3 not implemented")
}
func (*UnimplementedStudentServiceServer) GetStudents4(srv StudentService_GetStudents4Server) error {
	return status.Errorf(codes.Unimplemented, "method GetStudents4 not implemented")
}

func RegisterStudentServiceServer(s *grpc.Server, srv StudentServiceServer) {
	s.RegisterService(&_StudentService_serviceDesc, srv)
}

func _StudentService_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StudentService/GetStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GetStudent(ctx, req.(*StudentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_GetStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GetStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/StudentService/GetStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GetStudents(ctx, req.(*StudentIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_GetStudents2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StudentIDs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudentServiceServer).GetStudents2(m, &studentServiceGetStudents2Server{stream})
}

type StudentService_GetStudents2Server interface {
	Send(*Student) error
	grpc.ServerStream
}

type studentServiceGetStudents2Server struct {
	grpc.ServerStream
}

func (x *studentServiceGetStudents2Server) Send(m *Student) error {
	return x.ServerStream.SendMsg(m)
}

func _StudentService_GetStudents3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentServiceServer).GetStudents3(&studentServiceGetStudents3Server{stream})
}

type StudentService_GetStudents3Server interface {
	SendAndClose(*Students) error
	Recv() (*StudentID, error)
	grpc.ServerStream
}

type studentServiceGetStudents3Server struct {
	grpc.ServerStream
}

func (x *studentServiceGetStudents3Server) SendAndClose(m *Students) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studentServiceGetStudents3Server) Recv() (*StudentID, error) {
	m := new(StudentID)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StudentService_GetStudents4_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentServiceServer).GetStudents4(&studentServiceGetStudents4Server{stream})
}

type StudentService_GetStudents4Server interface {
	Send(*Student) error
	Recv() (*StudentID, error)
	grpc.ServerStream
}

type studentServiceGetStudents4Server struct {
	grpc.ServerStream
}

func (x *studentServiceGetStudents4Server) Send(m *Student) error {
	return x.ServerStream.SendMsg(m)
}

func (x *studentServiceGetStudents4Server) Recv() (*StudentID, error) {
	m := new(StudentID)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StudentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StudentService",
	HandlerType: (*StudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudent",
			Handler:    _StudentService_GetStudent_Handler,
		},
		{
			MethodName: "GetStudents",
			Handler:    _StudentService_GetStudents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStudents2",
			Handler:       _StudentService_GetStudents2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStudents3",
			Handler:       _StudentService_GetStudents3_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetStudents4",
			Handler:       _StudentService_GetStudents4_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "student.proto",
}

func (m *Student) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Student) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Student) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x40
	}
	if m.Height != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Height))))
		i--
		dAtA[i] = 0x3d
	}
	if m.Age != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x30
	}
	if m.Gender {
		i--
		if m.Gender {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Locations) > 0 {
		for iNdEx := len(m.Locations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Locations[iNdEx])
			copy(dAtA[i:], m.Locations[iNdEx])
			i = encodeVarintStudent(dAtA, i, uint64(len(m.Locations[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Scores) > 0 {
		for k := range m.Scores {
			v := m.Scores[k]
			baseI := i
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(v))))
			i--
			dAtA[i] = 0x15
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStudent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStudent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CreatedAt != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Students) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Students) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Students) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StudentID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StudentIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentIDs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentIDs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA2 := make([]byte, len(m.Ids)*10)
		var j1 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintStudent(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStudent(dAtA []byte, offset int, v uint64) int {
	offset -= sovStudent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Student) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovStudent(uint64(m.CreatedAt))
	}
	if len(m.Scores) > 0 {
		for k, v := range m.Scores {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStudent(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovStudent(uint64(mapEntrySize))
		}
	}
	if len(m.Locations) > 0 {
		for _, s := range m.Locations {
			l = len(s)
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	if m.Gender {
		n += 2
	}
	if m.Age != 0 {
		n += 1 + sovStudent(uint64(m.Age))
	}
	if m.Height != 0 {
		n += 5
	}
	if m.Id != 0 {
		n += 1 + sovStudent(uint64(m.Id))
	}
	return n
}

func (m *Students) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *StudentID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStudent(uint64(m.Id))
	}
	return n
}

func (m *StudentIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovStudent(uint64(e))
		}
		n += 1 + sovStudent(uint64(l)) + l
	}
	return n
}

func sovStudent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStudent(x uint64) (n int) {
	return sovStudent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Student) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Student: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Student: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scores == nil {
				m.Scores = make(map[string]float32)
			}
			var mapkey string
			var mapvalue float32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStudent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStudent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStudent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStudent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					mapvalue = math.Float32frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStudent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStudent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Scores[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locations = append(m.Locations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gender = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Height = float32(math.Float32frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Students) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Students: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Students: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Student{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStudent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStudent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStudent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStudent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStudent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStudent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStudent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStudent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStudent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStudent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStudent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStudent = fmt.Errorf("proto: unexpected end of group")
)
