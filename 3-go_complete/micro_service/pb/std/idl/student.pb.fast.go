// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package student_service

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Student) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Student[number], err)
}

func (x *Student) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Student) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.CreatedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Student) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	if x.Scores == nil {
		x.Scores = make(map[string]float32)
	}
	var key string
	var value float32
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadFloat(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Scores[key] = value
	return offset, nil
}

func (x *Student) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Locations = append(x.Locations, v)
	return offset, err
}

func (x *Student) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Gender, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Student) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Age, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Student) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Height, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *Student) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *Student) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *Student) fastWriteField2(buf []byte) (offset int) {
	if x.CreatedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCreatedAt())
	return offset
}

func (x *Student) fastWriteField3(buf []byte) (offset int) {
	if x.Scores == nil {
		return offset
	}
	for k, v := range x.GetScores() {
		offset += fastpb.WriteMapEntry(buf[offset:], 3,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteFloat(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *Student) fastWriteField4(buf []byte) (offset int) {
	if len(x.Locations) == 0 {
		return offset
	}
	for i := range x.GetLocations() {
		offset += fastpb.WriteString(buf[offset:], 4, x.GetLocations()[i])
	}
	return offset
}

func (x *Student) fastWriteField5(buf []byte) (offset int) {
	if !x.Gender {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 5, x.GetGender())
	return offset
}

func (x *Student) fastWriteField6(buf []byte) (offset int) {
	if x.Age == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, x.GetAge())
	return offset
}

func (x *Student) fastWriteField7(buf []byte) (offset int) {
	if x.Height == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 7, x.GetHeight())
	return offset
}

func (x *Student) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *Student) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *Student) sizeField2() (n int) {
	if x.CreatedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCreatedAt())
	return n
}

func (x *Student) sizeField3() (n int) {
	if x.Scores == nil {
		return n
	}
	for k, v := range x.GetScores() {
		n += fastpb.SizeMapEntry(3,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeFloat(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *Student) sizeField4() (n int) {
	if len(x.Locations) == 0 {
		return n
	}
	for i := range x.GetLocations() {
		n += fastpb.SizeString(4, x.GetLocations()[i])
	}
	return n
}

func (x *Student) sizeField5() (n int) {
	if !x.Gender {
		return n
	}
	n += fastpb.SizeBool(5, x.GetGender())
	return n
}

func (x *Student) sizeField6() (n int) {
	if x.Age == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, x.GetAge())
	return n
}

func (x *Student) sizeField7() (n int) {
	if x.Height == 0 {
		return n
	}
	n += fastpb.SizeFloat(7, x.GetHeight())
	return n
}

var fieldIDToName_Student = map[int32]string{
	1: "Name",
	2: "CreatedAt",
	3: "Scores",
	4: "Locations",
	5: "Gender",
	6: "Age",
	7: "Height",
}
